name: Sync PR to Issue and Projects v2

on:
  pull_request:
    types: [opened, edited, reopened, assigned, closed]
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
    - name: Install GitHub CLI
      run: |
        sudo apt update
        sudo apt install -y gh jq
        echo "${{ secrets.PROJECTS_TOKEN }}" | gh auth login --with-token

    - name: Extract linked issue number
      id: extract
      run: |
        echo "PR body:"
        echo "${{ github.event.pull_request.body }}"
        ISSUE=$(echo "${{ github.event.pull_request.body }}" | grep -oE '#[0-9]+' | head -n1 | tr -d '#')
        echo "Extracted issue: $ISSUE"
        echo "issue_number=$ISSUE" >> $GITHUB_OUTPUT

    - name: Fail early if no issue number was found
      if: steps.extract.outputs.issue_number == ''
      run: |
        echo "❌ No issue number found. Make sure PR body includes e.g. 'Fixes #123'"
        exit 1

    - name: Get issue node_id
      id: issue
      run: |
        ISSUE_NUMBER=${{ steps.extract.outputs.issue_number }}
        RESPONSE=$(gh api repos/${{ github.repository }}/issues/$ISSUE_NUMBER)
        NODE_ID=$(echo "$RESPONSE" | jq -r .node_id)
        echo "Extracted node_id: $NODE_ID"
        echo "node_id=$NODE_ID" >> $GITHUB_OUTPUT

    - name: Sync assignees from PR to issue
      run: |
        ISSUE_NUMBER=${{ steps.extract.outputs.issue_number }}
        PR_NUMBER=${{ github.event.pull_request.number }}
        
        echo "Syncing assignees from PR #$PR_NUMBER to issue #$ISSUE_NUMBER..."

        ASSIGNEES=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER | jq -r '.assignees[].login' | tr '\n' ',' | sed 's/,$//')

        if [ -z "$ASSIGNEES" ]; then
          echo "No assignees found on the PR."
        else
          echo "Assigning: $ASSIGNEES"
          gh api repos/${{ github.repository }}/issues/$ISSUE_NUMBER \
            -X PATCH \
            -F "assignees[]=$ASSIGNEES"
        fi
      env:
        GH_TOKEN: ${{ secrets.PROJECTS_TOKEN }}

    - name: Ensure issue is in the project and get itemId
      id: project_item
      run: |
        PROJECT_ID="PVT_kwDOAHYFo84AnPvS"
        NODE_ID="${{ steps.issue.outputs.node_id }}"

        echo "Trying to add issue to project..."
        ADD=$(gh api graphql -f query='
          mutation($project: ID!, $content: ID!) {
            addProjectV2ItemById(input: {
              projectId: $project,
              contentId: $content
            }) {
              item {
                id
              }
            }
          }' -f project=$PROJECT_ID -f content=$NODE_ID || true)

        ITEM_ID=$(echo "$ADD" | jq -r '.data.addProjectV2ItemById.item.id // empty')

        if [ -z "$ITEM_ID" ]; then
          echo "Already in project. Finding item ID..."
          FIND=$(gh api graphql -f query='
            query($id: ID!) {
              node(id: $id) {
                ... on Issue {
                  projectItems(first: 10) {
                    nodes {
                      id
                      project {
                        id
                      }
                    }
                  }
                }
              }
            }' -f id=$NODE_ID)

          ITEM_ID=$(echo "$FIND" | jq -r '.data.node.projectItems.nodes[] | select(.project.id == "'$PROJECT_ID'") | .id')
        fi

        if [ -z "$ITEM_ID" ]; then
          echo "❌ Could not determine project item ID"
          exit 1
        fi

        echo "✅ Project item ID: $ITEM_ID"
        echo "item_id=$ITEM_ID" >> $GITHUB_OUTPUT

    - name: Set status to In Progress
      if: github.event.action != 'closed'
      run: |
        echo "Setting status to In Progress..."
        gh api graphql -f query="$(cat <<EOF
          mutation {
            updateProjectV2ItemFieldValue(input: {
              projectId: "PVT_kwDOAHYFo84AnPvS",
              itemId: "${{ steps.project_item.outputs.item_id }}",
              fieldId: "PVTSSF_lADOAHYFo84AnPvSzgfAydE",
              value: { singleSelectOptionId: "47fc9ee4" }
            }) {
              projectV2Item { id }
            }
          }
        EOF
        )"

    - name: Set status to Done if PR merged
      if: github.event.pull_request.merged == true
      run: |
        echo "Setting status to Done..."
        gh api graphql -f query="$(cat <<EOF
          mutation {
            updateProjectV2ItemFieldValue(input: {
              projectId: "PVT_kwDOAHYFo84AnPvS",
              itemId: "${{ steps.project_item.outputs.item_id }}",
              fieldId: "PVTSSF_lADOAHYFo84AnPvSzgfAydE",
              value: { singleSelectOptionId: "98236657" }
            }) {
              projectV2Item { id }
            }
          }
        EOF
        )"
