name: Sync PR to Issue and Projects v2

on:
  pull_request:
    types: [opened, reopened, edited, assigned, closed]

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: read

    steps:
    - name: Extract linked issue number from PR body
      id: extract
      run: |
        echo "Full PR body:"
        echo "${{ github.event.pull_request.body }}"
        ISSUE=$(echo "${{ github.event.pull_request.body }}" | grep -oE '#[0-9]+' | head -n1 | tr -d '#')
        echo "Extracted issue number: $ISSUE"
        echo "issue_number=$ISSUE" >> $GITHUB_OUTPUT

    - name: Debug extracted issue number
      run: |
        echo "Issue number found: ${{ steps.extract.outputs.issue_number }}"

    - name: Fail early if no issue number was found
      if: steps.extract.outputs.issue_number == ''
      run: |
        echo "❌ No issue number found in PR body. Make sure to include 'Fixes #123'."
        exit 1

    - name: Get issue details (node_id and current assignees)
      id: issue
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PROJECTS_TOKEN }}
        result-encoding: json
        script: |
          const issue_number = Number('${{ steps.extract.outputs.issue_number }}');
          const issue = await github.rest.issues.get({
            ...context.repo,
            issue_number
          });
          return {
            node_id: issue.data.node_id,
            assignees: issue.data.assignees.map(a => a.login)
          };

    - name: Log node ID
      run: |
        echo "Node ID: ${{ steps.issue.outputs.node_id }}"

    - name: Add PR assignees to issue
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PROJECTS_TOKEN }}
        script: |
          const prAssignees = context.payload.pull_request.assignees.map(a => a.login);
          const issue_number = Number('${{ steps.extract.outputs.issue_number }}');
          if (prAssignees.length > 0) {
            await github.rest.issues.update({
              ...context.repo,
              issue_number,
              assignees: prAssignees
            });
          }

    - name: Ensure issue is in the project and get itemId
      id: add-to-project
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PROJECTS_TOKEN }}
        result-encoding: string
        script: |
          const projectId = "PVT_kwDOAHYFo84AnPvS";
          const issueNodeId = "${{ steps.issue.outputs.node_id }}";

          // Try to add the issue to the project
          try {
            const mutation = `
              mutation {
                addProjectV2ItemById(input: {
                  projectId: "${projectId}",
                  contentId: "${issueNodeId}"
                }) {
                  item {
                    id
                  }
                }
              }
            `;
            const result = await github.graphql(mutation);
            return result.addProjectV2ItemById.item.id;
          } catch (error) {
            console.log("Issue likely already in project. Attempting to retrieve item ID...");
            const query = `
              query {
                node(id: "${issueNodeId}") {
                  ... on Issue {
                    projectItems(first: 10) {
                      nodes {
                        id
                        project {
                          id
                        }
                      }
                    }
                  }
                }
              }
            `;
            const response = await github.graphql(query);
            const item = response.node.projectItems.nodes.find(i => i.project.id === projectId);
            if (!item) throw new Error("Project item not found.");
            return item.id;
          }

    - name: Set status to "In Progress"
      if: github.event.action != 'closed'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PROJECTS_TOKEN }}
        script: |
          const mutation = `
            mutation {
              updateProjectV2ItemFieldValue(input: {
                projectId: "PVT_kwDOAHYFo84AnPvS",
                itemId: "${{ steps.add-to-project.outputs.result }}",
                fieldId: "PVTSSF_lADOAHYFo84AnPvSzgfAydE",
                value: { singleSelectOptionId: "47fc9ee4" }
              }) {
                projectV2Item { id }
              }
            }
          `;
          await github.graphql(mutation);

    - name: Set status to "Done" if PR merged
      if: github.event.pull_request.merged == true
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PROJECTS_TOKEN }}
        script: |
          const mutation = `
            mutation {
              updateProjectV2ItemFieldValue(input: {
                projectId: "PVT_kwDOAHYFo84AnPvS",
                itemId: "${{ steps.add-to-project.outputs.result }}",
                fieldId: "PVTSSF_lADOAHYFo84AnPvSzgfAydE",
                value: { singleSelectOptionId: "98236657" }
              }) {
                projectV2Item { id }
              }
            }
          `;
          await github.graphql(mutation);
