name: Github Testing
on: [push]

jobs:
  test:
    services:
      postgres:
        image: postgres:12
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USERNAME: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04]
        ruby: [ 2.7, 3.0 ]
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ endsWith(matrix.ruby, 'head') || matrix.ruby == 'debug' }}
    steps:

      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: config bundler
        run:  |
          bundle config set without 'development staging production'
          bundle config set deployment '[secure]'
          bundle env
          head -n1 $(which bundle)

      - name: Install wkhtmlpdf (push)
        run: |
          wget http://se.archive.ubuntu.com/ubuntu/pool/main/libp/libpng/libpng12-0_1.2.54-1ubuntu1_amd64.deb
          sudo dpkg -i libpng12-0_1.2.54-1ubuntu1_amd64.deb
          wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.5/wkhtmltox_0.12.5-1.xenial_amd64.deb
          sudo apt-get install -y gdebi
          sudo gdebi --non-interactive wkhtmltox_0.12.5-1.xenial_amd64.deb
        if: github.event_name == 'push'

      - name: Set ENV for codeclimate (pull_request)
        run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/$GITHUB_HEAD_REF:refs/remotes/origin/$GITHUB_HEAD_REF
          echo "GIT_BRANCH=$GITHUB_HEAD_REF" >> $GITHUB_ENV
          echo "GIT_COMMIT_SHA=$(git rev-parse origin/$GITHUB_HEAD_REF)" >> $GITHUB_ENV
        if: github.event_name == 'pull_request'

      - name: Set ENV for codeclimate (push)
        run: |
          echo "GIT_BRANCH=$GITHUB_REF" >> $GITHUB_ENV
          echo "GIT_COMMIT_SHA=$GITHUB_SHA" >> $GITHUB_ENV
        if: github.event_name == 'push'

      - name: Prepare CodeClimate
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        run: |
          curl -LSs 'https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64' >./cc-test-reporter;
          chmod +x ./cc-test-reporter
          ./cc-test-reporter before-build

      - name: Run Tests
        env:
          PG_DATABASE: postgres
          PG_HOST: localhost
          PG_USER: postgres
          PG_PASSWORD: password
          PG_PORT: ${{ job.services.postgres.ports[5432] }}
          RAILS_ENV: test
          COVERAGE: true
          DISABLE_SPRING: 1
        run: |
          cp config/database.yml.sample config/database.yml
          cp config/customization.yml.sample config/customization.yml
          yarn install --check-files
          bundle exec rake db:setup
          bundle exec rake data:migrate
          bundle exec rails assets:precompile
          bundle exec rails test test/*
          yarn test
      - name: Save coverage
        run: ./cc-test-reporter format-coverage --output coverage/codeclimate.${{ matrix.ruby }}.json

      - uses: actions/upload-artifact@v2.2.4
        with:
          name: coverage-${{ matrix.ruby }}
          path: coverage/codeclimate.${{ matrix.ruby }}.json

  upload_coverage:
    strategy:
      matrix:
        os: [ ubuntu-18.04 ]
        ruby: [ 2.7, 3.0 ]
    runs-on: ubuntu-18.04

    env:
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      CC_TEST_REPORTER_URL: https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64

    needs: test

    steps:
      - name: Download test coverage reporter
        run: curl -L $CC_TEST_REPORTER_URL > cc-test-reporter

      - name: Give test coverage reporter executable permissions
        run: chmod +x cc-test-reporter

      - uses: actions/download-artifact@v2.0.10
        with:
          name: coverage-${{ matrix.ruby }}
          path: coverage

      - name: Aggregate & upload results to Code Climate
        run: |
          ./cc-test-reporter sum-coverage coverage/codeclimate.*.json
          ./cc-test-reporter upload-coverage

