name: Github Testing
on: [push]

jobs:
  bundle_audit:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.4.1
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: config bundler
        run:  |
          bundle config set without 'development staging production'
          bundle config set deployment '[secure]'
          bundle env
          head -n1 $(which bundle)
      - name: Bundle Audit Check
        run: bundle exec bundle-audit check --update

  brakeman:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.4.1
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: config bundler
        run:  |
          bundle config set without 'development staging production'
          bundle config set deployment '[secure]'
          bundle env
          head -n1 $(which bundle)
      - name: Run Brakeman
        run: bundle exec brakeman --quiet --skip-libs --exit-on-warn -i config/brakeman.ignore

  test:
    services:
      postgres:
        image: postgres:17
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USERNAME: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        ruby: [ '3.4.1' ]
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ endsWith(matrix.ruby, 'head') || matrix.ruby == 'debug' }}
    steps:

      - uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically

      - name: Hack sources.list
        run: sudo sed -i 's|http://azure.archive.ubuntu.com/ubuntu/|http://mirror.arizona.edu/ubuntu/|g' /etc/apt/sources.list

      - name: config bundler
        run:  |
          bundle config set without 'development staging production'
          bundle config set deployment '[secure]'
          bundle env
          head -n1 $(which bundle)

      - name: Install wkhtmltopdf (push)
        run: sudo apt-get update && sudo apt-get install -y wkhtmltopdf
        if: github.event_name == 'push'

      - name: Set ENV for codeclimate (pull_request)
        run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/$GITHUB_HEAD_REF:refs/remotes/origin/$GITHUB_HEAD_REF
          echo "GIT_BRANCH=$GITHUB_HEAD_REF" >> $GITHUB_ENV
          echo "GIT_COMMIT_SHA=$(git rev-parse origin/$GITHUB_HEAD_REF)" >> $GITHUB_ENV
        if: github.event_name == 'pull_request'

      - name: Set ENV for codeclimate (push)
        run: |
          echo "GIT_BRANCH=$GITHUB_REF" >> $GITHUB_ENV
          echo "GIT_COMMIT_SHA=$GITHUB_SHA" >> $GITHUB_ENV
        if: github.event_name == 'push'

      - name: Prepare CodeClimate
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        run: |
          curl -LSs --fail 'https://codeclimate.com/downloads/test-reporter/test-reporter-0.11.1-linux-amd64' >./cc-test-reporter;
          chmod +x ./cc-test-reporter
          ./cc-test-reporter before-build
          
      - name: Run Tests
        env:
          PG_DATABASE: postgres
          PG_HOST: localhost
          PG_USER: postgres
          PG_PASSWORD: password
          PG_PORT: ${{ job.services.postgres.ports[5432] }}
          RAILS_ENV: test
          COVERAGE: true
          DISABLE_SPRING: 1
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        run: |
          mkdir -p coverage
          cp config/database.yml.sample config/database.yml
          cp config/customization.yml.sample config/customization.yml
          yarn install --check-files
          bundle exec rake db:setup
          bundle exec rake data:migrate
          bundle exec rails assets:precompile
          bundle exec rails test test/*
          echo "COVERAGE=$COVERAGE" # Debug: print to confirm env var is set

      - name: Debug coverage files
        if: always()
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Looking for coverage directory:"
          find . -type d -name "coverage" | xargs ls -la
          echo "Looking for all JSON files:"
          find . -name "*.json"
          echo "Looking specifically for SimpleCov result files:"
          find . -name ".resultset.json" -o -name "coverage.json"
          echo "Checking SimpleCov result format:"
          cat > check_format.rb << 'EOF'
          require 'json'
          begin
            file_path = 'coverage/.resultset.json'
            if File.exist?(file_path)
              data = JSON.parse(File.read(file_path))
              puts "File structure overview:"
              data.each do |test_name, test_data|
                puts "Test name: #{test_name}"
                puts "Keys in test_data: #{test_data.keys.join(', ')}"
                if test_data.has_key?("coverage")
                  puts "Coverage is a #{test_data['coverage'].class.name}"
                  if test_data["coverage"].is_a?(Hash)
                    sample_file = test_data["coverage"].keys.first
                    puts "Sample file: #{sample_file}"
                    puts "Coverage for sample file is a #{test_data['coverage'][sample_file].class.name}"
                    if test_data['coverage'][sample_file].is_a?(Hash)
                      puts "Keys in coverage object: #{test_data['coverage'][sample_file].keys.join(', ')}"
                    end
                  end
                end
              end
            else
              puts "File not found: #{file_path}"
            end
          rescue => e
            puts "Error analyzing SimpleCov format: #{e.message}"
          end
          EOF
          
          bundle exec ruby check_format.rb

      - name: Format coverage
        if: always()
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        run: |
          # Создадим скрипт для преобразования формата SimpleCov
          cat > convert_simplecov.rb << 'EOF'
          require 'json'
          
          # Чтение файла результатов SimpleCov
          file_path = ARGV[0] || 'coverage/.resultset.json'
          output_path = ARGV[1] || 'coverage/.resultset.json.converted'
          
          begin
            data = JSON.parse(File.read(file_path))
            
            # Преобразование для каждого результата теста
            data.each do |test_name, test_data|
              if test_data["coverage"].is_a?(Hash)
                test_data["coverage"].each do |file_path, coverage|
                  # Если coverage является объектом, преобразуем его в массив
                  if coverage.is_a?(Hash) && coverage.has_key?("lines")
                    test_data["coverage"][file_path] = coverage["lines"]
                  end
                end
              end
            end
            
            # Запись преобразованного файла
            File.write(output_path, JSON.pretty_generate(data))
            puts "Successfully converted SimpleCov format to: #{output_path}"
          rescue => e
            puts "Error converting SimpleCov format: #{e.message}"
            exit 1
          end
          EOF
          
          # Запуск скрипта преобразования
          bundle exec ruby convert_simplecov.rb coverage/.resultset.json coverage/.resultset.json.converted
          
          # Использование преобразованного файла
          ./cc-test-reporter format-coverage -t simplecov -o coverage/codeclimate.json coverage/.resultset.json.converted --debug
          ./cc-test-reporter upload-coverage --debug