name: Github Testing
on: [push]

jobs:
  bundle_audit:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.4.1
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: config bundler
        run:  |
          bundle config set without 'development staging production'
          bundle config set deployment '[secure]'
          bundle env
          head -n1 $(which bundle)
      - name: Bundle Audit Check
        run: bundle exec bundle-audit check --update

  brakeman:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.4.1
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: config bundler
        run:  |
          bundle config set without 'development staging production'
          bundle config set deployment '[secure]'
          bundle env
          head -n1 $(which bundle)
      - name: Run Brakeman
        run: bundle exec brakeman --quiet --skip-libs --exit-on-warn -i config/brakeman.ignore

  test:
    services:
      postgres:
        image: postgres:18
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USERNAME: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5       

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        ruby: [ '3.4.1' ]
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ endsWith(matrix.ruby, 'head') || matrix.ruby == 'debug' }}
    steps:

      - uses: actions/checkout@v5
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically

      - name: Hack sources.list
        run: sudo sed -i 's|http://azure.archive.ubuntu.com/ubuntu/|http://mirror.arizona.edu/ubuntu/|g' /etc/apt/sources.list                                                                                          

      - name: config bundler
        run:  |
          bundle config set without 'development staging production'
          bundle config set deployment '[secure]'
          bundle env
          head -n1 $(which bundle)

      - name: Install wkhtmltopdf (push)
        run: sudo apt-get update && sudo apt-get install -y wkhtmltopdf
        if: github.event_name == 'push'

      - name: Debug coverage files
        if: always()
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Looking for coverage directory:"
          find . -type d -name "coverage" | xargs ls -la
          echo "Looking for all JSON files:"
          find . -name "*.json"
          echo "Looking specifically for SimpleCov result files:"
          find . -name ".resultset.json" -o -name "coverage.json"
          echo "Checking SimpleCov result format:"
          cat > check_format.rb << 'EOF'
          require 'json'
          begin
            file_path = 'coverage/.resultset.json'
            if File.exist?(file_path)
              data = JSON.parse(File.read(file_path))
              puts "File structure overview:"
              data.each do |test_name, test_data|
                puts "Test name: #{test_name}"
                puts "Keys in test_data: #{test_data.keys.join(', ')}"
                if test_data.has_key?("coverage")
                  puts "Coverage is a #{test_data['coverage'].class.name}"
                  if test_data["coverage"].is_a?(Hash)
                    sample_file = test_data["coverage"].keys.first
                    puts "Sample file: #{sample_file}"
                    puts "Coverage for sample file is a #{test_data['coverage'][sample_file].class.name}"   
                    if test_data['coverage'][sample_file].is_a?(Hash)
                      puts "Keys in coverage object: #{test_data['coverage'][sample_file].keys.join(', ')}" 
                    end
                  end
                end
              end
            else
              puts "File not found: #{file_path}"
            end
          rescue => e
            puts "Error analyzing SimpleCov format: #{e.message}"
          end
          EOF

          bundle exec ruby check_format.rb

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: coverage
          path: coverage/
          retention-days: 14
